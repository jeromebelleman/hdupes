#! /usr/bin/env python

'''
If fdupes stood for "find duplicates", hdupes will stand for "handle
duplicates".
'''

import sys
import os
import argparse

def run(dupeset, dryrun):
    '''
    Run the changes
    '''

    for link in dupeset['ln']:
        print "ln -fs '%s' '%s'" % (dupeset['src'], link)
        if not dryrun:
            os.remove(link)
            os.symlink(dupeset['src'], link)
    for removal in dupeset['rm']:
        print "rm -f '%s'" % removal
        if not dryrun:
            os.remove(removal)


def getargs(line):
    '''
    Get line arguments
    '''

    return ' '.join(line.split()[1:])


def main():
    '''
    Main loop
    '''

    parser = argparse.ArgumentParser(description="Handle duplicates.")
    parser.add_argument('report')
    parser.add_argument('-n', '--dryrun', action='store_true')
    args = parser.parse_args()

    dupeset = {'ln': [], 'rm': []}
    usage = 0
    first = True
    with open(args.report) as fhl:
        for line in fhl:
            line = line.strip()

            if line.startswith('@ln '):
                lineargs = getargs(line)
                dupeset['ln'].append(lineargs)
                usage += os.path.getsize(lineargs)
            elif line.startswith('@rm '):
                lineargs = getargs(line)
                dupeset['rm'].append(lineargs)
                usage += os.path.getsize(lineargs)
            elif not line:
                run(dupeset, args.dryrun)
                dupeset = {'ln': [], 'rm': []}
                first = True
            else:
                dupeset['src'] = os.path.abspath(line)
                if first:
                    first = False
                else:
                    usage += os.path.getsize(line)

    print "Duplicate usage: %d MB" % (usage / 1024 / 1024)


if __name__ == '__main__':
    sys.exit(main())
