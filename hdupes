#! /usr/bin/env python

'''
If fdupes stood for "find duplicates", hdupes will stand for "handle
duplicates".
'''

import sys
import os
import argparse
import subprocess
import tempfile
import yaml


def run(dupeset, dryrun):
    '''
    Run the changes
    '''

    for link in dupeset['ln']:
        print "ln -fs '%s' '%s'" % (dupeset['src'], link)
        if not dryrun:
            os.remove(link)
            os.symlink(dupeset['src'], link)
    for removal in dupeset['rm']:
        print "rm -f '%s'" % removal
        if not dryrun:
            os.remove(removal)


def skip(exts, fhl):
    '''
    Skip sets by extension
    '''

    lines = []
    dupset = []
    doskip = False

    for line in fhl:
        line = line.strip()
        dupset.append(line)
        if os.path.splitext(line)[1][1:] in exts:
            doskip = True
        elif not line:
            if not doskip:
                lines.extend(dupset)
            dupset = []
            doskip = False

    if not doskip:
        lines.extend(dupset)

    return lines


def main():
    '''
    Main loop
    '''

    # Parse arguments
    parser = argparse.ArgumentParser(description="Handle duplicates.")
    parser.add_argument('-r', '--report')
    parser.add_argument('-n', '--dryrun', action='store_true')
    args = parser.parse_args()

    # Load config file
    try:
        with open('.hdupes.yaml') as fhl:
            cfg = yaml.load(fhl)
    except IOError:
        cfg = {'skipexts': []}

    # Run fdupes if needs be
    if args.report:
        report = args.report
    else:
        # Run fdupes
        proc = subprocess.Popen(['fdupes', '-r', '.'], stdout=subprocess.PIPE)

        # Skip sets by extension
        lines = skip(cfg['skipexts'], proc.stdout)

        # Write leftover sets
        tmp = tempfile.NamedTemporaryFile()
        print >> tmp, '\n'.join(lines)
        tmp.flush()

        # Start Vim
        subprocess.call(['vim', tmp.name])

        # Set report file
        report = tmp.name

    # Process report
    dupeset = {'ln': [], 'rm': []}
    usage = 0
    first = True
    with open(report) as fhl:
        for line in fhl:
            line = line.strip()

            if line.startswith('@ln '):
                lineargs = line[4:]
                dupeset['ln'].append(lineargs)
                usage += os.path.getsize(lineargs)
            elif line.startswith('@rm '):
                lineargs = line[4:]
                dupeset['rm'].append(lineargs)
                usage += os.path.getsize(lineargs)
            elif not line:
                run(dupeset, args.dryrun)
                dupeset = {'ln': [], 'rm': []}
                first = True
            else:
                dupeset['src'] = os.path.abspath(line)
                if first:
                    first = False
                else:
                    usage += os.path.getsize(line)

        run(dupeset, args.dryrun)

    print "Duplicate usage: %d MB" % (usage / 1024 / 1024)


if __name__ == '__main__':
    sys.exit(main())
